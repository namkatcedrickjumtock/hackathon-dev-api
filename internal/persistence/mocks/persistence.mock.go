// Code generated by MockGen. DO NOT EDIT.
// Source: ./persistence.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Iknite-space/cliqets-api/internal/models/event"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockRepository) CreateEvent(ctx context.Context, event models.Event) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockRepositoryMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockRepository)(nil).CreateEvent), ctx, event)
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, order models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, order)
}

// CreatePurchasedTicket mocks base method.
func (m *MockRepository) CreatePurchasedTicket(ctx context.Context, purchasedOrder models.PurchasedTicket) (*models.PurchasedTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchasedTicket", ctx, purchasedOrder)
	ret0, _ := ret[0].(*models.PurchasedTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchasedTicket indicates an expected call of CreatePurchasedTicket.
func (mr *MockRepositoryMockRecorder) CreatePurchasedTicket(ctx, purchasedOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchasedTicket", reflect.TypeOf((*MockRepository)(nil).CreatePurchasedTicket), ctx, purchasedOrder)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, newUser models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, newUser)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, newUser)
}

// GetAllCategories mocks base method.
func (m *MockRepository) GetAllCategories(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockRepositoryMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockRepository)(nil).GetAllCategories), ctx)
}

// GetEventByID mocks base method.
func (m *MockRepository) GetEventByID(ctx context.Context, id string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, id)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockRepositoryMockRecorder) GetEventByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockRepository)(nil).GetEventByID), ctx, id)
}

// GetEvents mocks base method.
func (m *MockRepository) GetEvents(ctx context.Context, cityID, category string, startKey, count uint) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, cityID, category, startKey, count)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockRepositoryMockRecorder) GetEvents(ctx, cityID, category, startKey, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockRepository)(nil).GetEvents), ctx, cityID, category, startKey, count)
}

// GetGuestList mocks base method.
func (m *MockRepository) GetGuestList(ctx context.Context, eventID string) ([]models.GuestListEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestList", ctx, eventID)
	ret0, _ := ret[0].([]models.GuestListEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestList indicates an expected call of GetGuestList.
func (mr *MockRepositoryMockRecorder) GetGuestList(ctx, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestList", reflect.TypeOf((*MockRepository)(nil).GetGuestList), ctx, eventID)
}

// GetOrderByID mocks base method.
func (m *MockRepository) GetOrderByID(ctx context.Context, orderID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockRepositoryMockRecorder) GetOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockRepository)(nil).GetOrderByID), ctx, orderID)
}

// GetPurchasedTicketBYID mocks base method.
func (m *MockRepository) GetPurchasedTicketBYID(ctx context.Context, purchasedID string) (*models.PurchasedTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasedTicketBYID", ctx, purchasedID)
	ret0, _ := ret[0].(*models.PurchasedTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasedTicketBYID indicates an expected call of GetPurchasedTicketBYID.
func (mr *MockRepositoryMockRecorder) GetPurchasedTicketBYID(ctx, purchasedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasedTicketBYID", reflect.TypeOf((*MockRepository)(nil).GetPurchasedTicketBYID), ctx, purchasedID)
}

// GetPurchasedTickets mocks base method.
func (m *MockRepository) GetPurchasedTickets(ctx context.Context, userID, eventID string) ([]models.PurchasedTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasedTickets", ctx, userID, eventID)
	ret0, _ := ret[0].([]models.PurchasedTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasedTickets indicates an expected call of GetPurchasedTickets.
func (mr *MockRepositoryMockRecorder) GetPurchasedTickets(ctx, userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasedTickets", reflect.TypeOf((*MockRepository)(nil).GetPurchasedTickets), ctx, userID, eventID)
}

// GetUpComingEventsCities mocks base method.
func (m *MockRepository) GetUpComingEventsCities(ctx context.Context) ([]models.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpComingEventsCities", ctx)
	ret0, _ := ret[0].([]models.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpComingEventsCities indicates an expected call of GetUpComingEventsCities.
func (mr *MockRepositoryMockRecorder) GetUpComingEventsCities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpComingEventsCities", reflect.TypeOf((*MockRepository)(nil).GetUpComingEventsCities), ctx)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, userID)
}

// UpdateEvent mocks base method.
func (m *MockRepository) UpdateEvent(ctx context.Context, event models.Event, eventID string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event, eventID)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockRepositoryMockRecorder) UpdateEvent(ctx, event, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockRepository)(nil).UpdateEvent), ctx, event, eventID)
}

// UpdateOrderStatus mocks base method.
func (m *MockRepository) UpdateOrderStatus(ctx context.Context, status, orderID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, status, orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatus(ctx, status, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatus), ctx, status, orderID)
}

// UpdateUserInfo mocks base method.
func (m *MockRepository) UpdateUserInfo(ctx context.Context, user models.User, userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, user, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockRepositoryMockRecorder) UpdateUserInfo(ctx, user, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockRepository)(nil).UpdateUserInfo), ctx, user, userID)
}
