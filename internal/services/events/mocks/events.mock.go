// Code generated by MockGen. DO NOT EDIT.
// Source: ./events.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Iknite-space/cliqets-api/internal/models/event"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockService) CreateEvent(ctx context.Context, event models.Event) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockServiceMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockService)(nil).CreateEvent), ctx, event)
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(ctx context.Context, order models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), ctx, order)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, newUser models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, newUser)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, newUser)
}

// GetAllCategories mocks base method.
func (m *MockService) GetAllCategories(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockServiceMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockService)(nil).GetAllCategories), ctx)
}

// GetAllEvents mocks base method.
func (m *MockService) GetAllEvents(ctx context.Context, cityID, categoryID string, startKey, count uint) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", ctx, cityID, categoryID, startKey, count)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockServiceMockRecorder) GetAllEvents(ctx, cityID, categoryID, startKey, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockService)(nil).GetAllEvents), ctx, cityID, categoryID, startKey, count)
}

// GetBookedEvents mocks base method.
func (m *MockService) GetBookedEvents(ctx context.Context, userID string) (*models.BookedEvents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookedEvents", ctx, userID)
	ret0, _ := ret[0].(*models.BookedEvents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookedEvents indicates an expected call of GetBookedEvents.
func (mr *MockServiceMockRecorder) GetBookedEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookedEvents", reflect.TypeOf((*MockService)(nil).GetBookedEvents), ctx, userID)
}

// GetCurrentCity mocks base method.
func (m *MockService) GetCurrentCity(ctx context.Context, long, lat float64) (*models.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCity", ctx, long, lat)
	ret0, _ := ret[0].(*models.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCity indicates an expected call of GetCurrentCity.
func (mr *MockServiceMockRecorder) GetCurrentCity(ctx, long, lat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCity", reflect.TypeOf((*MockService)(nil).GetCurrentCity), ctx, long, lat)
}

// GetEventByID mocks base method.
func (m *MockService) GetEventByID(ctx context.Context, id string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, id)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockServiceMockRecorder) GetEventByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockService)(nil).GetEventByID), ctx, id)
}

// GetGuestList mocks base method.
func (m *MockService) GetGuestList(ctx context.Context, eventID string) ([]models.GuestListEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestList", ctx, eventID)
	ret0, _ := ret[0].([]models.GuestListEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestList indicates an expected call of GetGuestList.
func (mr *MockServiceMockRecorder) GetGuestList(ctx, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestList", reflect.TypeOf((*MockService)(nil).GetGuestList), ctx, eventID)
}

// GetOrderByID mocks base method.
func (m *MockService) GetOrderByID(ctx context.Context, orderID, userID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID, userID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockServiceMockRecorder) GetOrderByID(ctx, orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockService)(nil).GetOrderByID), ctx, orderID, userID)
}

// GetPurchasedTicketBYID mocks base method.
func (m *MockService) GetPurchasedTicketBYID(ctx context.Context, purchasedID string) (*models.PurchasedTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasedTicketBYID", ctx, purchasedID)
	ret0, _ := ret[0].(*models.PurchasedTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasedTicketBYID indicates an expected call of GetPurchasedTicketBYID.
func (mr *MockServiceMockRecorder) GetPurchasedTicketBYID(ctx, purchasedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasedTicketBYID", reflect.TypeOf((*MockService)(nil).GetPurchasedTicketBYID), ctx, purchasedID)
}

// GetPurchasedTickets mocks base method.
func (m *MockService) GetPurchasedTickets(ctx context.Context, userID, eventID string) ([]models.PurchasedTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasedTickets", ctx, userID, eventID)
	ret0, _ := ret[0].([]models.PurchasedTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasedTickets indicates an expected call of GetPurchasedTickets.
func (mr *MockServiceMockRecorder) GetPurchasedTickets(ctx, userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasedTickets", reflect.TypeOf((*MockService)(nil).GetPurchasedTickets), ctx, userID, eventID)
}

// GetUser mocks base method.
func (m *MockService) GetUser(ctx context.Context, uiud string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, uiud)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServiceMockRecorder) GetUser(ctx, uiud interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockService)(nil).GetUser), ctx, uiud)
}

// TransStatus mocks base method.
func (m *MockService) TransStatus(ctx context.Context, status, exRef, amount, currency, code, operatorRef, signature string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransStatus", ctx, status, exRef, amount, currency, code, operatorRef, signature)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransStatus indicates an expected call of TransStatus.
func (mr *MockServiceMockRecorder) TransStatus(ctx, status, exRef, amount, currency, code, operatorRef, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransStatus", reflect.TypeOf((*MockService)(nil).TransStatus), ctx, status, exRef, amount, currency, code, operatorRef, signature)
}

// UpdateEvent mocks base method.
func (m *MockService) UpdateEvent(ctx context.Context, event models.Event, eventID string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event, eventID)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockServiceMockRecorder) UpdateEvent(ctx, event, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockService)(nil).UpdateEvent), ctx, event, eventID)
}

// UpdateUserInfo mocks base method.
func (m *MockService) UpdateUserInfo(ctx context.Context, user models.User, userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, user, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockServiceMockRecorder) UpdateUserInfo(ctx, user, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockService)(nil).UpdateUserInfo), ctx, user, userID)
}
